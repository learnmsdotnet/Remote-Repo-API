http://csharp-video-tutorials.blogspot.com/

WebAPI:
--------
Session 1:

01. What is ASP.NET Web API ?
02. Difference between WCF and WebAPI and when to use one over the other
03. What are Restful services

> API: Application Programming Interface
> ASP.Net Web API: Framework for building API. HTTP based services on top of .Net Framework
> The common use of API is to build a RestFul services, which can be consumed by broad range of clients like 
	> Browser
	> Mobile apps
	> Desktop apps
	> IOT services
> Using Web API it is also possible to create non RESTful services

> RESTful stands for: Representational State Transfer, was first introduced by Roy Fielding in the year 2000
> REST is an architectural pattern for creating an API which uses that uses HTTP as its underlying communiation method
> REST architectural pattern specifies set of constraints that a system should adher to

> Rest Constraint: 
	> Client Server Constraint: 
		> Client sends a request and Server sends a response
		> This separation of concers gives raise to server side and client side logic
		
	> Stateless Constraint:
		> The communiation between and server and client must be stateless between the request (i.e. we should not be storing anything in the server related to the client)
		> The request from Client -> Server must contain all the necessary information for the server to process the request (this ensures that each request can be independently by the server)
	
	> Cacheable Constraint:
		> Some data provided by the server (eg. list of productions, list of Departments in a company this data does not change that often)
		> This constraint says that let the client know how long the data is good for and the client does not have to come back to the server for the same data over and over again
		> Caching avoids unnecessary processing and significiently increases the processing of the system
		
	> Uniform Interface Constraint:
		> Defines interface between client and the server. To understand this we need to understand what a RESOURCE is and the HTTP verbs (GET, PUT, POST and DELETE)
		> Here RESOURCES represents the Data Entities (E.g. Product, Employee, Department etc.)
		> The HTTP verbs GET, PUT, POST and DELETE with each request tells the API what to do with the RESOURCE
		> Each RESOURCE is identified with a unique URI.  
		> In an API we may have the following request
			> /Employees (RESOURCE)	-- GET (VERB)	-- Get List of Employees					-- https://asp.net/Employees
			> /Employee/1 (RESOURCE)	-- GET (VERB)	-- Get Employee with ID = 1				-- https://asp.net/Employee/1
			> /Employee    (RESOURCE)	-- POST (VERB)	-- Create a new Employee				-- https://asp.net/Employee 
			> /Employee/1 (RESOURCE)	-- PUT (VERB)	-- Updates Employee with ID = 1       -- https://asp.net/Employee/1
			> /Employee/1 (RESOURCE)	-- DELETE (VERB)	-- Deletes Employee with ID = 1    -- https://asp.net/Employee/1
	
	> HATEOS (Hypermedia as the Engine of Application state)
		> In each request there will be a set of hyperlinks, that lets us know what all the actions that can be performed on the RESOURCE
	
	> Layered System
	> Code on Demand (Optional)

> Difference between WCF and WebAPI and when to use one over the other
WCF: Windows Communication Foundation, used to create RESTful services
	> Drawback: Lots of configuration is required inorder to create a WCF service to RESTful service (complicated configuration and can be headache)
	> WCF more suited for transport/protocol independent (eg. single service and multiple end points)
		> e.g there are two clients (Java client and .Net client) 
			> Java client needs the transport protocol to be HTTP and message format to be XML for interoperability
			> .Net client needs the transport protocol to be TCP and message format to be Binary for performance
			> for the above scenario WCF is the right choise, create a single WCF service and configure two end-points one for each client (Java and .Net client)
	> Eg. If we are struck with .Net 3.5 and have an existing SOAP service we support and want to add REST to reach more clients, then WCF will be the option

Session 2:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> Creating a Web API Project
> Code auto generated by Web API

> VS 2019 -- File -- Create New Project -- ASP.Net Web Application (from Installed templates)
	> Project Name: KudV.S2.API
	> Location: D:\14.Training\11.PP WebAPI2\01.HandsOnLab-KudV
	> Solution Name: KudV.S2.API
	> Framework: .NET Framework 4.8
	> Create

	> Type of Web application to create: Web API
	> Create

> Error: When create API, project if any error related to PowerShell, execute the below command
	> Start > All Programs > Widnows PowerShell > SET ExecutionPolicy AllSigned

> The structure of WebAPI project will be much similar to MVC project (with Models, Views and Controllers)
> WebAPI controllers are much different from MVC controllers
> ValuesController class inherits from ApiController class (from System.Web.Http namespace)
> HomeController class is for MVC application, which inherts from Controller class (from System.Web.Mvc namespace)
> In ValuesController class we have GET, POST, PUT and DELETE methods. There methods responds to GET, PUT, POST and DELETE HTTP verbs
> We have two Overloaded parameters for the GET method, both these methods response to GET verb depending on where value for GET parameter is specified in URI or not

Default Route:
> Navigate to Global.asax file, we have Application_Start() event handler method
> This event is raised when the application starts
> There are many configuration methods present, for WebAPI it is present in GlobalConfiguration.Configuration
> Inside WebApiConfig.Register() method
> The file WebApiConfig.cs file is present inside the project App_Start folder
> In the Register() method, we have the default route configured for our WebAPI method (WebAPI routes different from MVC routes)
> MVC routes are present inside the file RouteConfig.cs
> Default route for API project starts with {api} followed by {controller} and then the {parameter}

Run the Project:
	> http://localhost:56666/api/values
	> default route: routeTemplate: "api/{controller}/{id}",
> In the ValuesController there are two overloaded methods of GET function, so which GET() method will respone to our URI
> In the URI there is no GET() method for the parameter, so GET() method with no input parameter will respond to the request
> Output:
	<ArrayOfstring xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.microsoft.com/2003/10/Serialization/Arrays">
	<string>value1</string>
	<string>value2</string>
	</ArrayOfstring>
> Now again pass a parameter to the GET function
> http://localhost:56666/api/values/1

Comment the ValuesController.cs and run the project
	> http://localhost:56666/api/values/1
> Output:
	<Error>
		<Message>
			No HTTP resource was found that matches the request URI 'http://localhost:56666/api/values/1'.
		</Message>
		<MessageDetail>
			No type was found that matches the controller named 'values'.
		</MessageDetail>
	</Error>


Session 3:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
> HTTP GET, PUT, POST and DELETE verbs
> Actions that can be performed on table row
	> C - Create Row
	> R - Read Row
	> D - Delete Row
	> U - Update Row
> In context to ASP.Net WebAPI these four actions corresponds to GET, POST, PUT and DELETE verbs
	> CRUD		HTTP VERB
	> Create		POST
	> Read			GET
	> Update		PUT
	> Delete		DELETE
> Request Verbs (The HTTP verbs GET, POST, PUT and DELETE) they describes what should be done with the resource
	> Eg, Do you want to Create, Read, Update or Delete an entity
> The above four are the most commonly used verbs, for a compete list of verbs please visit: http://www.w3.org/protocols/rfc2616/rfc2616-sec9.html 

> Request Header: When client sends request to a server, the request contains a HEADER and a BODY
	> the request header contains additional information such as 
		> What type of RESPONSE is required (do we need the request from server to be in XML, JSON, or some other format)

> Request Body: Contains the data we need to sent to the server
	> Eg. A POST request contains the data for the new item that we need to Create
	> The data format can be XML or JSON

> Response Body: Data sent as RESPONSE from the server
	> Eg. If the request is for a specific product, then is Response body includes Product details in XML or in JSON format

> Response Status Code: They are the HTTP status code that gives client the details on the status of the request.
	> Some of the common response codes are 
		> 200 -- OK
		> 404 -- page not found
		> 204 -- no content
		
> Fiddler: We will use a tool called Fiddler for POST, PUT and DELETE actions

> In ValuesController class let us include a static class Strings of type List<string>
	>   // Declare a static varaible at class level
        static List<string> Strings = new List<string>()
        {
            "value0", "value1", "value2"
        };

		// GET api/values
        public IEnumerable<string> Get()
        {
            return Strings;
        }

        // GET api/values/5
        public string Get(int id)
        {
            return Strings[id];
        }

        // CREATE
        // POST api/values
        public void Post([FromBody]string value)
        {
            Strings.Add(value);
        }

        // MODIFY
        // PUT api/values/5
        public void Put(int id, [FromBody]string value)
        {
            Strings[id] = value;
        }

        // DELETE
        // DELETE api/values/5
        public void Delete(int id)
        {
            Strings.RemoveAt(id);
        }

> REBUILD and RUN the program	, also open Fiddler
> http://localhost:56666/api/values
> Output: 
		<ArrayOfstring xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.microsoft.com/2003/10/Serialization/Arrays">
			<string>value0</string>
			<string>value1</string>
			<string>value2</string>
		</ArrayOfstring>

> The request is captured by Fiddler, and double click the request. In the XML tab we can see the values in XML format value0, value1, value2

> Now click the Composer tab, drag and drop the request inside the composer tab
	> in the tab, we can see the type of request we have issued (GET)
	> and the URI of request: http://localhost:56666/api/values

> Now we need to issue a POST request and create a new item:
	> In the Composer tab, click the request type as POST and for POST request type we need to specific the Composer Body
	> Composer > Request Body > "value3"
	> When we send something to the server, we need to specify the content-Type  (so specify it in the header)
	> Composer > Header > Content-Type: Application/JSON
	> Click 'Execute' button

	> The request is now completed and the response code is 204 (No Content), its just a POST request added a new item to the collection (nothing to return)
	> Lets verify if the new item is added to the list
	> Navigate to the composer tab, select the type as GET  (with GET request we do not specify request body) and click 'Execute' button
	> The request completed successfully, with four values : value0, value1, value2, value3
	> In RESPONSE header tab, we can see the response code as 200 OK
	> We are getting the request in XML format
		ArrayOfstring [ xmlns:i=http://www.w3.org/2001/XMLSchema-instance xmlns=http://schemas.microsoft.com/2003/10/Serialization/Arrays ]
			string
				value0
			string
				value1
			string
				value2
			string
				value3
	> If we need the output to be in JSON format, then that need to be specified in the Request Header
	> Go back to the Composer tab, in the GET request, Accept section has the below type
		> Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
	> remote it and add Accept: application/json and hit 'Execute' button
	> Now XML tab is empty and JSON tab has the below data
		> JSON
			value0
			value1
			value2
			value3
	> We now have a JSON object
	
	> Now lets perform a PUT instead of POST action in the composer tab
	> Lets update the value of the string value3 to value4 in Composer tab - Request Body
	> and change the value of the URL with parameter: http://localhost:56666/api/values/3
	> and hit 'Execute' button
	> Since it is an update the HTTP status code is 204 (No Content)
	> Now change it to GET request to see if the update was successfully
	
	> Composer - Message Header:
	> Accept: application/json  -- we want the return type from the server (in JSON format)
	> Content-Type: application/json  -- the format we are sending it to the server
	
	> Now lets initiate a DELETE request, go back to the COMPOSER
	> Select the request type as Delete
	> URI: http://localhost:56666/api/values/3
	> and hit 'Execute' button
	> since it is a DELETE request the HTTP status code is 204 (No Content)
	> Now change it to GET request to see if the DELETE was successful
	
	> In the code for the three methods POST, PUT and DELETE the return type is void. Hence we get the HTTP status code as 204 - 'no content'
	> With WebAPI developer has the complete control over code on what return type to return

Session 4:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
> Retrieve Data from SQL Server using WebAPI and EF

